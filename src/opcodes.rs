use std::ops::Deref;

use dex::{ushort, Dex};

enum Operand {
    Constant(u32),
    LongConstant(u64),
    Short(ushort),
    String(String),
}

pub struct Instruction {
    opcode: Opcode,
    span: usize,
    operands: Vec<Operand>
}

impl Instruction {
    fn new(opcode: Opcode, span: usize, operands: Vec<Operand>) -> Self {
        Self {
            opcode,
            span,
            operands
        }
    }

    pub fn from_insns<T>(insns: &[ushort], offset: &mut usize, dex: &Dex<&[u8]>) -> Option<Self> {
        let opcode_byte = insns[*offset];
        if let Some(opcode) = Opcode::from_ushort(opcode_byte) {
            let instruction = match opcode_byte {
                0x00 | 0x01 | 0x04 | 0x07 | 0x0a..=0x12 | 0x1d |
                0x1e | 0x21 | 0x27 | 0x28 | 0x7b..=0x8f | 0xb0..=0xcf => Instruction::new(opcode, 1, vec![]),
                0x02 | 0x05 | 0x08 | 0x13 | 0x15 | 0x19 | 0x1c | 0x1a | 
                0x1c | 0x1f | 0x20 | 0x22 | 0x23 | 0x29 | 0x2d..=0x3d | 
                0x44..=0x6d | 0x60..=0x6d | 0x90..=0xaf | 0xfe | 0xff => Instruction::new(opcode, 2, vec![]),
                0x03 | 0x06 | 0x09 | 0x26 | 0x2b | 0x2c => Instruction::new(opcode, 3, vec![]),
                0x13 | 0x16 | 0x1a | 0xd0..=0xe2 => {
                    if opcode_byte == 0x1a {
                        if let Ok(string) = dex.get_string(insns[*offset + 1] as u32) {
                            Instruction::new(opcode, 2, vec![Operand::String(string.deref().to_string())])
                        } else {
                            Instruction::new(opcode, 2, vec![])
                        }
                    } else {
                        Instruction::new(opcode, 2, vec![Operand::Short(insns[*offset + 1])])
                    }
                },
                0x14 | 0x17 | 0x1b => {
                    if opcode_byte == 0x1b {
                        let string_id = (insns[*offset + 1] << 16) as u32 | insns[*offset + 2] as u32;
                        if let Ok(string) = dex.get_string(string_id) {
                            Instruction::new(opcode, 3, vec![Operand::String(string.deref().to_string())])
                        } else {
                            Instruction::new(opcode, 3, vec![])
                        }
                    } else {
                        let constant_value = (insns[*offset + 1] << 16) as u32 | insns[*offset + 2] as u32;
                        Instruction::new(opcode, 3, vec![Operand::Constant(constant_value)])
                    }
                }
            };
            *offset += instruction.span;
            return Some(instruction);
        }
        None
    }
}

pub enum Opcode {
    Nop,
    Move,
    MoveFrom16,
    Move16,
    MoveWide,
    MoveWideFrom16,
    MoveWide16,
    MoveObject,
    MoveObjectFrom16,
    MoveObject16,
    MoveResult,
    MoveResultWide,
    MoveResultObject,
    MoveException,
    ReturnVoid,
    Return,
    ReturnWide,
    ReturnObject,
    Const4,
    Const16,
    Const,
    ConstHigh16,
    ConstWide16,
    ConstWide32,
    ConstWide,
    ConstWideHigh16,
    ConstString,
    ConstStringJumbo,
    ConstClass,
    MonitorEnter,
    MonitorExit,
    CheckCast,
    InstanceOf,
    ArrayLength,
    NewInstance,
    NewArray,
    FilledNewArray,
    FilledNewArrayRange,
    FillArrayData,
    Throw,
    Goto,
    Goto16,
    Goto32,
    PackedSwitch,
    SparseSwitch,
    CmplFloat,
    CmpgFloat,
    CmplDouble,
    CmpgDouble,
    CmpLong,
    IfEq,
    IfNe,
    IfLt,
    IfGe,
    IfGt,
    IfLe,
    IfEqz,
    IfNez,
    IfLtz,
    IfGez,
    IfGtz,
    IfLez,
    Aget,
    AgetWide,
    AgetObject,
    AgetBoolean,
    AgetByte,
    AgetChar,
    AgetShort,
    Aput,
    AputWide,
    AputObject,
    AputBoolean,
    AputByte,
    AputChar,
    AputShort,
    Iget,
    IgetWide,
    IgetObject,
    IgetBoolean,
    IgetByte,
    IgetChar,
    IgetShort,
    Iput,
    IputWide,
    IputObject,
    IputBoolean,
    IputByte,
    IputChar,
    IputShort,
    Sget,
    SgetWide,
    SgetObject,
    SgetBoolean,
    SgetByte,
    SgetChar,
    SgetShort,
    Sput,
    SputWide,
    SputObject,
    SputBoolean,
    SputByte,
    SputChar,
    SputShort,
    InvokeVirtual,
    InvokeSuper,
    InvokeDirect,
    InvokeStatic,
    InvokeInterface,
    InvokeVirtualRange,
    InvokeSuperRange,
    InvokeDirectRange,
    InvokeStaticRange,
    InvokeInterfaceRange,
    NegInt,
    NotInt,
    NegLong,
    NotLong,
    NegFloat,
    NegDouble,
    IntToLong,
    IntToFloat,
    IntToDouble,
    LongToInt,
    LongToFloat,
    LongToDouble,
    FloatToInt,
    FloatToLong,
    FloatToDouble,
    DoubleToInt,
    DoubleToLong,
    DoubleToFloat,
    IntToByte,
    IntToChar,
    IntToShort,
    AddInt,
    SubInt,
    MulInt,
    DivInt,
    RemInt,
    AndInt,
    OrInt,
    XorInt,
    ShlInt,
    ShrInt,
    UshrInt,
    AddLong,
    SubLong,
    MulLong,
    DivLong,
    RemLong,
    AndLong,
    OrLong,
    XorLong,
    ShlLong,
    ShrLong,
    UshrLong,
    AddFloat,
    SubFloat,
    MulFloat,
    DivFloat,
    RemFloat,
    AddDouble,
    SubDouble,
    MulDouble,
    DivDouble,
    RemDouble,
    AddInt2Addr,
    SubInt2Addr,
    MulInt2Addr,
    DivInt2Addr,
    RemInt2Addr,
    AndInt2Addr,
    OrInt2Addr,
    XorInt2Addr,
    ShlInt2Addr,
    ShrInt2Addr,
    UshrInt2Addr,
    AddLong2Addr,
    SubLong2Addr,
    MulLong2Addr,
    DivLong2Addr,
    RemLong2Addr,
    AndLong2Addr,
    OrLong2Addr,
    XorLong2Addr,
    ShlLong2Addr,
    ShrLong2Addr,
    UshrLong2Addr,
    AddFloat2Addr,
    SubFloat2Addr,
    MulFloat2Addr,
    DivFloat2Addr,
    RemFloat2Addr,
    AddDouble2Addr,
    SubDouble2Addr,
    MulDouble2Addr,
    DivDouble2Addr,
    RemDouble2Addr,
    AddIntLit16,
    SubIntLit16,
    MulIntLit16,
    DivIntLit16,
    RemIntLit16,
    AndIntLit16,
    OrIntLit16,
    XorIntLit16,
    AddIntLit8,
    SubIntLit8,
    MulIntLit8,
    DivIntLit8,
    RemIntLit8,
    AndIntLit8,
    OrIntLit8,
    XorIntLit8,
    ShlIntLit8,
    ShrIntLit8,
    UshrIntLit8,
    InvokePolymorphic,
    InvokePolymorphicRange,
    InvokeCustom,
    InvokeCustomRange,
    ConstMethodHandle,
    ConstMethodType,
}

impl Opcode {
    pub fn from_ushort(value: ushort) -> Option<Self> {
        match value {
            0x0 => Some(Opcode::Nop),
            0x1 => Some(Opcode::Move),
            0x2 => Some(Opcode::MoveFrom16),
            0x3 => Some(Opcode::Move16),
            0x4 => Some(Opcode::MoveWide),
            0x5 => Some(Opcode::MoveWideFrom16),
            0x6 => Some(Opcode::MoveWide16),
            0x7 => Some(Opcode::MoveObject),
            0x8 => Some(Opcode::MoveObjectFrom16),
            0x9 => Some(Opcode::MoveObject16),
            0xa => Some(Opcode::MoveResult),
            0xb => Some(Opcode::MoveResultWide),
            0xc => Some(Opcode::MoveResultObject),
            0xd => Some(Opcode::MoveException),
            0xe => Some(Opcode::ReturnVoid),
            0xf => Some(Opcode::Return),
            0x10 => Some(Opcode::ReturnWide),
            0x11 => Some(Opcode::ReturnObject),
            0x12 => Some(Opcode::Const4),
            0x13 => Some(Opcode::Const16),
            0x14 => Some(Opcode::Const),
            0x15 => Some(Opcode::ConstHigh16),
            0x16 => Some(Opcode::ConstWide16),
            0x17 => Some(Opcode::ConstWide32),
            0x18 => Some(Opcode::ConstWide),
            0x19 => Some(Opcode::ConstWideHigh16),
            0x1a => Some(Opcode::ConstString),
            0x1b => Some(Opcode::ConstStringJumbo),
            0x1c => Some(Opcode::ConstClass),
            0x1d => Some(Opcode::MonitorEnter),
            0x1e => Some(Opcode::MonitorExit),
            0x1f => Some(Opcode::CheckCast),
            0x20 => Some(Opcode::InstanceOf),
            0x21 => Some(Opcode::ArrayLength),
            0x22 => Some(Opcode::NewInstance),
            0x23 => Some(Opcode::NewArray),
            0x24 => Some(Opcode::FilledNewArray),
            0x25 => Some(Opcode::FilledNewArrayRange),
            0x26 => Some(Opcode::FillArrayData),
            0x27 => Some(Opcode::Throw),
            0x28 => Some(Opcode::Goto),
            0x29 => Some(Opcode::Goto16),
            0x2a => Some(Opcode::Goto32),
            0x2b => Some(Opcode::PackedSwitch),
            0x2c => Some(Opcode::SparseSwitch),
            0x2d => Some(Opcode::CmplFloat),
            0x2e => Some(Opcode::CmpgFloat),
            0x2f => Some(Opcode::CmplDouble),
            0x30 => Some(Opcode::CmpgDouble),
            0x31 => Some(Opcode::CmpLong),
            0x32 => Some(Opcode::IfEq),
            0x33 => Some(Opcode::IfNe),
            0x34 => Some(Opcode::IfLt),
            0x35 => Some(Opcode::IfGe),
            0x36 => Some(Opcode::IfGt),
            0x37 => Some(Opcode::IfLe),
            0x38 => Some(Opcode::IfEqz),
            0x39 => Some(Opcode::IfNez),
            0x3a => Some(Opcode::IfLtz),
            0x3b => Some(Opcode::IfGez),
            0x3c => Some(Opcode::IfGtz),
            0x3d => Some(Opcode::IfLez),
            0x44 => Some(Opcode::Aget),
            0x45 => Some(Opcode::AgetWide),
            0x46 => Some(Opcode::AgetObject),
            0x47 => Some(Opcode::AgetBoolean),
            0x48 => Some(Opcode::AgetByte),
            0x49 => Some(Opcode::AgetChar),
            0x4a => Some(Opcode::AgetShort),
            0x4b => Some(Opcode::Aput),
            0x4c => Some(Opcode::AputWide),
            0x4d => Some(Opcode::AputObject),
            0x4e => Some(Opcode::AputBoolean),
            0x4f => Some(Opcode::AputByte),
            0x50 => Some(Opcode::AputChar),
            0x51 => Some(Opcode::AputShort),
            0x52 => Some(Opcode::Iget),
            0x53 => Some(Opcode::IgetWide),
            0x54 => Some(Opcode::IgetObject),
            0x55 => Some(Opcode::IgetBoolean),
            0x56 => Some(Opcode::IgetByte),
            0x57 => Some(Opcode::IgetChar),
            0x58 => Some(Opcode::IgetShort),
            0x59 => Some(Opcode::Iput),
            0x5a => Some(Opcode::IputWide),
            0x5b => Some(Opcode::IputObject),
            0x5c => Some(Opcode::IputBoolean),
            0x5d => Some(Opcode::IputByte),
            0x5e => Some(Opcode::IputChar),
            0x5f => Some(Opcode::IputShort),
            0x60 => Some(Opcode::Sget),
            0x61 => Some(Opcode::SgetWide),
            0x62 => Some(Opcode::SgetObject),
            0x63 => Some(Opcode::SgetBoolean),
            0x64 => Some(Opcode::SgetByte),
            0x65 => Some(Opcode::SgetChar),
            0x66 => Some(Opcode::SgetShort),
            0x67 => Some(Opcode::Sput),
            0x68 => Some(Opcode::SputWide),
            0x69 => Some(Opcode::SputObject),
            0x6a => Some(Opcode::SputBoolean),
            0x6b => Some(Opcode::SputByte),
            0x6c => Some(Opcode::SputChar),
            0x6d => Some(Opcode::SputShort),
            0x6e => Some(Opcode::InvokeVirtual),
            0x6f => Some(Opcode::InvokeSuper),
            0x70 => Some(Opcode::InvokeDirect),
            0x71 => Some(Opcode::InvokeStatic),
            0x72 => Some(Opcode::InvokeInterface),
            0x74 => Some(Opcode::InvokeVirtualRange),
            0x75 => Some(Opcode::InvokeSuperRange),
            0x76 => Some(Opcode::InvokeDirectRange),
            0x77 => Some(Opcode::InvokeStaticRange),
            0x78 => Some(Opcode::InvokeInterfaceRange),
            0x7b => Some(Opcode::NegInt),
            0x7c => Some(Opcode::NotInt),
            0x7d => Some(Opcode::NegLong),
            0x7e => Some(Opcode::NotLong),
            0x7f => Some(Opcode::NegFloat),
            0x80 => Some(Opcode::NegDouble),
            0x81 => Some(Opcode::IntToLong),
            0x82 => Some(Opcode::IntToFloat),
            0x83 => Some(Opcode::IntToDouble),
            0x84 => Some(Opcode::LongToInt),
            0x85 => Some(Opcode::LongToFloat),
            0x86 => Some(Opcode::LongToDouble),
            0x87 => Some(Opcode::FloatToInt),
            0x88 => Some(Opcode::FloatToLong),
            0x89 => Some(Opcode::FloatToDouble),
            0x8a => Some(Opcode::DoubleToInt),
            0x8b => Some(Opcode::DoubleToLong),
            0x8c => Some(Opcode::DoubleToFloat),
            0x8d => Some(Opcode::IntToByte),
            0x8e => Some(Opcode::IntToChar),
            0x8f => Some(Opcode::IntToShort),
            0x90 => Some(Opcode::AddInt),
            0x91 => Some(Opcode::SubInt),
            0x92 => Some(Opcode::MulInt),
            0x93 => Some(Opcode::DivInt),
            0x94 => Some(Opcode::RemInt),
            0x95 => Some(Opcode::AndInt),
            0x96 => Some(Opcode::OrInt),
            0x97 => Some(Opcode::XorInt),
            0x98 => Some(Opcode::ShlInt),
            0x99 => Some(Opcode::ShrInt),
            0x9a => Some(Opcode::UshrInt),
            0x9b => Some(Opcode::AddLong),
            0x9c => Some(Opcode::SubLong),
            0x9d => Some(Opcode::MulLong),
            0x9e => Some(Opcode::DivLong),
            0x9f => Some(Opcode::RemLong),
            0xa0 => Some(Opcode::AndLong),
            0xa1 => Some(Opcode::OrLong),
            0xa2 => Some(Opcode::XorLong),
            0xa3 => Some(Opcode::ShlLong),
            0xa4 => Some(Opcode::ShrLong),
            0xa5 => Some(Opcode::UshrLong),
            0xa6 => Some(Opcode::AddFloat),
            0xa7 => Some(Opcode::SubFloat),
            0xa8 => Some(Opcode::MulFloat),
            0xa9 => Some(Opcode::DivFloat),
            0xaa => Some(Opcode::RemFloat),
            0xab => Some(Opcode::AddDouble),
            0xac => Some(Opcode::SubDouble),
            0xad => Some(Opcode::MulDouble),
            0xae => Some(Opcode::DivDouble),
            0xaf => Some(Opcode::RemDouble),
            0xb0 => Some(Opcode::AddInt2Addr),
            0xb1 => Some(Opcode::SubInt2Addr),
            0xb2 => Some(Opcode::MulInt2Addr),
            0xb3 => Some(Opcode::DivInt2Addr),
            0xb4 => Some(Opcode::RemInt2Addr),
            0xb5 => Some(Opcode::AndInt2Addr),
            0xb6 => Some(Opcode::OrInt2Addr),
            0xb7 => Some(Opcode::XorInt2Addr),
            0xb8 => Some(Opcode::ShlInt2Addr),
            0xb9 => Some(Opcode::ShrInt2Addr),
            0xba => Some(Opcode::UshrInt2Addr),
            0xbb => Some(Opcode::AddLong2Addr),
            0xbc => Some(Opcode::SubLong2Addr),
            0xbd => Some(Opcode::MulLong2Addr),
            0xbe => Some(Opcode::DivLong2Addr),
            0xbf => Some(Opcode::RemLong2Addr),
            0xc0 => Some(Opcode::AndLong2Addr),
            0xc1 => Some(Opcode::OrLong2Addr),
            0xc2 => Some(Opcode::XorLong2Addr),
            0xc3 => Some(Opcode::ShlLong2Addr),
            0xc4 => Some(Opcode::ShrLong2Addr),
            0xc5 => Some(Opcode::UshrLong2Addr),
            0xc6 => Some(Opcode::AddFloat2Addr),
            0xc7 => Some(Opcode::SubFloat2Addr),
            0xc8 => Some(Opcode::MulFloat2Addr),
            0xc9 => Some(Opcode::DivFloat2Addr),
            0xca => Some(Opcode::RemFloat2Addr),
            0xcb => Some(Opcode::AddDouble2Addr),
            0xcc => Some(Opcode::SubDouble2Addr),
            0xcd => Some(Opcode::MulDouble2Addr),
            0xce => Some(Opcode::DivDouble2Addr),
            0xcf => Some(Opcode::RemDouble2Addr),
            0xd0 => Some(Opcode::AddIntLit16),
            0xd1 => Some(Opcode::SubIntLit16),
            0xd2 => Some(Opcode::MulIntLit16),
            0xd3 => Some(Opcode::DivIntLit16),
            0xd4 => Some(Opcode::RemIntLit16),
            0xd5 => Some(Opcode::AndIntLit16),
            0xd6 => Some(Opcode::OrIntLit16),
            0xd7 => Some(Opcode::XorIntLit16),
            0xd8 => Some(Opcode::AddIntLit8),
            0xd9 => Some(Opcode::SubIntLit8),
            0xda => Some(Opcode::MulIntLit8),
            0xdb => Some(Opcode::DivIntLit8),
            0xdc => Some(Opcode::RemIntLit8),
            0xdd => Some(Opcode::AndIntLit8),
            0xde => Some(Opcode::OrIntLit8),
            0xdf => Some(Opcode::XorIntLit8),
            0xe0 => Some(Opcode::ShlIntLit8),
            0xe1 => Some(Opcode::ShrIntLit8),
            0xe2 => Some(Opcode::UshrIntLit8),
            0xfa => Some(Opcode::InvokePolymorphic),
            0xfb => Some(Opcode::InvokePolymorphicRange),
            0xfc => Some(Opcode::InvokePolymorphic),
            0xfb => Some(Opcode::InvokeCustom),
            0xfd => Some(Opcode::InvokeCustomRange),
            0xfe => Some(Opcode::ConstMethodHandle),
            0xff => Some(Opcode::ConstMethodType),
            _ => None
        }
    }
}